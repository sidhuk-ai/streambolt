// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  imageUrl      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower  Follow[] @relation("Followers")
  following Follow[] @relation("Following")

  blockedBy Block[] @relation("BlockedBy")
  blocking  Block[] @relation("Blocking")
}

model Follow {
  id String @id @default(cuid())

  follower   User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  createdAt DateTime @default(now())

  @@unique([followerId, followingId]) // duplicate follows se suraksha
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id String @id @default(cuid())

  blocker   User   @relation("Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String

  blocked   User   @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  blockedAt DateTime @default(now())

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
